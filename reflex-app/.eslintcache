[{"D:\\Programowanie\\Moje programy\\ReflexApp\\reflex-app\\src\\index.js":"1","D:\\Programowanie\\Moje programy\\ReflexApp\\reflex-app\\src\\reportWebVitals.js":"2","D:\\Programowanie\\Moje programy\\ReflexApp\\reflex-app\\src\\components\\Game.js":"3","D:\\Programowanie\\Moje programy\\ReflexApp\\reflex-app\\src\\components\\numberDisplay.js":"4","D:\\Programowanie\\Moje programy\\ReflexApp\\reflex-app\\src\\components\\CircleDisplay.js":"5","D:\\Programowanie\\Moje programy\\ReflexApp\\reflex-app\\src\\utils.js":"6","D:\\Programowanie\\Moje programy\\ReflexApp\\reflex-app\\src\\components\\menuDisplay.js":"7","D:\\Programowanie\\Moje programy\\ReflexApp\\reflex-app\\src\\components\\circleDisplay.js":"8","D:\\Programowanie\\Moje programy\\ReflexApp\\reflex-app\\src\\components\\game.js":"9","D:\\Programowanie\\Moje programy\\ReflexApp\\reflex-app\\src\\components\\App.js":"10"},{"size":518,"mtime":1609434894934,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":6664,"mtime":1609433997607,"results":"14","hashOfConfig":"12"},{"size":645,"mtime":1609426316688,"results":"15","hashOfConfig":"12"},{"size":2635,"mtime":1609426639638,"results":"16","hashOfConfig":"12"},{"size":1602,"mtime":1609426339523,"results":"17","hashOfConfig":"12"},{"size":2881,"mtime":1609426313967,"results":"18","hashOfConfig":"12"},{"size":2628,"mtime":1609435221431,"results":"19","hashOfConfig":"12"},{"size":6664,"mtime":1609433997607,"results":"20","hashOfConfig":"12"},{"size":383,"mtime":1609434780770,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"i0qmct",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":1,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"24"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"24"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"D:\\Programowanie\\Moje programy\\ReflexApp\\reflex-app\\src\\index.js",[],["50","51"],"D:\\Programowanie\\Moje programy\\ReflexApp\\reflex-app\\src\\reportWebVitals.js",[],"D:\\Programowanie\\Moje programy\\ReflexApp\\reflex-app\\src\\components\\Game.js",["52","53","54","55","56","57","58"],"D:\\Programowanie\\Moje programy\\ReflexApp\\reflex-app\\src\\components\\numberDisplay.js",[],"D:\\Programowanie\\Moje programy\\ReflexApp\\reflex-app\\src\\components\\CircleDisplay.js",["59","60"],"\r\nimport React from \"react\";\r\nimport utils from \"../utils\"\r\n\r\n\r\n// Function to check which value of displayed numbers is the lowest\r\nfunction findMin(array) {\r\n    let thisArray = [...new Set(array)]\r\n    let min = Math.min(...thisArray);\r\n    let badIndex = thisArray.indexOf(\"\");\r\n    if (badIndex !== -1) {\r\n        thisArray.splice(badIndex, 1)\r\n        min = Math.min(...thisArray);\r\n    }\r\n    return min;\r\n}\r\n\r\n\r\nconst CircleDisplay = props => {\r\n    // This function will be used onClick during normal mode, if smallest number is clicked it diseappear, that is, number becomes \"\"\r\n    function normalMode(clickedCircle) {\r\n        if (props.numbers[clickedCircle - 1] === findMin(props.numbers)) {\r\n            return (\r\n                props.numbers[clickedCircle - 1] = \"\",\r\n                props.setNumbers([...props.numbers])\r\n\r\n            )\r\n\r\n        }\r\n    }\r\n    // Function used onClick during survival mode, afert clicking on smallest number, number is being randomly replaced and additional time is added to the clock\r\n    function survivalMode(clickedCircle) {\r\n        if (props.numbers[clickedCircle - 1] === findMin(props.numbers)) {\r\n            return (\r\n                props.setScore(props.score + 1),\r\n                props.pool.push(props.numbers[clickedCircle - 1]),\r\n                props.setSurvivalTimer(props.survivalTimer + 0.25),\r\n                props.numbers[clickedCircle - 1] = props.pool.splice(Math.floor(Math.random() * props.pool.length), 1)[0],\r\n                props.setNumbers([...props.numbers])\r\n            )\r\n\r\n        }\r\n        else\r\n            // If clicked number is different than the lowest, player loses time\r\n            props.setSurvivalTimer(props.survivalTimer - 1);\r\n    }\r\n\r\n    let gameModes = {\r\n        normal: normalMode,\r\n        survival: survivalMode\r\n    };\r\n\r\n\r\n    return (<div className=\"circles\">\r\n        {utils.range(1, props.count).map(circleId => (\r\n            <svg key={circleId} overflow=\"visible\" id={`svgCircle${circleId}`}>\r\n                <circle id={`circle${circleId}`} cx={0} cy={0} r=\"40\"\r\n                    stroke=\"black\"\r\n                    fill=\"black\"\r\n                    onClick={() => {\r\n                        let circleNumber = event.target.id[6];\r\n                        switch (props.gameMode) {\r\n                            case \"normal\": return gameModes.normal(circleNumber);\r\n                            case \"survival\": return gameModes.survival(circleNumber);\r\n                        }\r\n\r\n\r\n                    }}\r\n                />\r\n            </svg>\r\n\r\n        ))}\r\n    </div>)\r\n};\r\n\r\nexport default CircleDisplay;",["61","62"],"D:\\Programowanie\\Moje programy\\ReflexApp\\reflex-app\\src\\utils.js",["63","64","65"],"const utils = {\r\n    range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\r\n\r\n\r\n    setTranslate: function (xPos, yPos, id, t) {\r\n        let el = document.getElementById(id);\r\n        el.style.transform = \"translate3d(\" + xPos + \"px\" + \", \" + yPos + \"px, 0)\";\r\n        el.style.transition = t + \"s \" + \"ease-in-out\";\r\n    },\r\n\r\n\r\n    draw: function (array, pool) {\r\n        for (let i = 0; i < 9; i++) {\r\n            if (array.length < 9) {\r\n                array.push(\r\n                    pool.splice(\r\n                        Math.floor(Math.random() * pool.length), 1)[0]\r\n                );\r\n            }\r\n        }\r\n    },\r\n\r\n    spread: function (elementsName) {\r\n        let translationMatrixX = [-1, 0, 1, -1, 0, 1, -1, 0, 1];\r\n        let translationMatrixY = [-1, -1, -1, 0, 0, 0, 1, 1, 1];\r\n        let translationValue = 100;\r\n        let translateX = translationMatrixX.map((x) => x * translationValue);\r\n        let translateY = translationMatrixY.map((x) => x * translationValue);\r\n        let id;\r\n        for (let i = 0; i < 9; i++) {\r\n            id = `${elementsName}${i + 1}`;\r\n            utils.setTranslate(translateX[i], translateY[i], id, 1);\r\n        }\r\n    },\r\n\r\n    focus: function (elementsName) {\r\n        let id;\r\n        for (let i = 0; i < 9; i++) {\r\n            id = `${elementsName}${i + 1}`;\r\n            utils.setTranslate(0, 0, id, 1);\r\n        }\r\n    },\r\n\r\n    circleSizeChanger: function (size, t, el) {\r\n        el.setAttribute(\"r\", size);\r\n        el.style.transition = t + \"s \" + \"ease-in-out\";\r\n    }\r\n\r\n};\r\n\r\nexport default utils;",["66","67"],"D:\\Programowanie\\Moje programy\\ReflexApp\\reflex-app\\src\\components\\menuDisplay.js",["68","69"],"import React from \"react\";\r\n\r\n\r\nconst MenuDisplay = props => {\r\n    return (\r\n        <div className=\"menu\">\r\n            <svg overflow=\"visible\" id={`menuSvg`}>\r\n                <circle id={`menuCircle`} cx={0} cy={0} r=\"140\"\r\n                    stroke=\"black\"\r\n                    fill=\"black\"\r\n                />\r\n            </svg>\r\n            <p id={`title`} style={{ visibility: props.visibility }}>\r\n                REFLEX TRAINER\r\n            </p>\r\n\r\n            <button id={`startNormalButton`} style={{ visibility: props.visibility }} onClick={() => (props.setGameMode(\"normal\"), props.gameStart(\"normal\"))}>\r\n                START NORMAL MODE\r\n            </button>\r\n\r\n            <button id={`startSurivalButton`} style={{ visibility: props.visibility }} onClick={() => (props.setGameMode(\"survival\"), props.gameStart(\"survival\"))} >\r\n                START SURVIVAL MODE\r\n            </button>\r\n\r\n            <button id={`helpButton`} style={{ visibility: props.visibility }} onClick={() => props.showHelp1()}>\r\n                HELP\r\n            </button>\r\n\r\n            <p id={`normalWinMessage`} style={{ visibility: props.visibilityNormalWin }}>\r\n                CONGRATULATIONS!<br /><br />\r\n                    Your time is: &nbsp; {props.solveTime}s\r\n            </p>\r\n\r\n\r\n            <p id={`survivalWinMessage`} style={{ visibility: props.visibilitySurvivalWin }}>\r\n                Time's up!<br /><br />\r\n                Your score: {props.score}\r\n            </p>\r\n\r\n            <button id={`backButton`} style={{ visibility: props.visibilityBackButton }} onClick={() => props.resetFunction()}>\r\n                GO BACK\r\n            </button>\r\n\r\n            <p id={`clock`} style={{ visibility: props.clockVisibility }}>\r\n                {props.timeMessage} {props.solveTime}s &nbsp; &nbsp; {props.scoreMessage} {props.score}\r\n            </p>\r\n\r\n            <p id={`helpMessage1`} style={{ visibility: props.visibilityHelp1 }}>\r\n                NORMAL MODE:<br /><br /><br />\r\n                Your job is to click the values in <br />\r\n                 the circles in ascending order.<br /><br />\r\n                Do it as fast as you can.<br /><br />\r\n                <button id=\"helpArrow1\" onClick={props.showHelp2}>&#x2192;</button>\r\n            </p>\r\n\r\n            <p id={`helpMessage2`} style={{ visibility: props.visibilityHelp2 }}>\r\n                SURVIVAL MODE:<br /><br /><br />\r\n                In this mode, time is limited and values<br />\r\n                 are being continuously replenished. <br /><br />\r\n                Wrong choices cost you time.<br />\r\n                Correct ones result in extra time. <br /> <br />\r\n                How many points can you score?<br />\r\n                <button id=\"helpArrow2\" onClick={props.showHelp1}>&#x2190;</button>\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MenuDisplay;\r\n\r\n","D:\\Programowanie\\Moje programy\\ReflexApp\\reflex-app\\src\\components\\circleDisplay.js",["70"],"\r\nimport React from \"react\";\r\nimport utils from \"../utils\"\r\n\r\n\r\n// Function to check which value of displayed numbers is the lowest\r\nfunction findMin(array) {\r\n    let thisArray = [...new Set(array)]\r\n    let min = Math.min(...thisArray);\r\n    let badIndex = thisArray.indexOf(\"\");\r\n    if (badIndex !== -1) {\r\n        thisArray.splice(badIndex, 1)\r\n        min = Math.min(...thisArray);\r\n    }\r\n    return min;\r\n}\r\n\r\n\r\nconst CircleDisplay = props => {\r\n    // This function will be used onClick during normal mode, if smallest number is clicked it diseappear, that is, number becomes \"\"\r\n    function normalMode(clickedCircle) {\r\n        if (props.numbers[clickedCircle - 1] === findMin(props.numbers)) {\r\n            return (\r\n                props.numbers[clickedCircle - 1] = \"\",\r\n                props.setNumbers([...props.numbers])\r\n\r\n            )\r\n\r\n        }\r\n    }\r\n    // Function used onClick during survival mode, afert clicking on smallest number, number is being randomly replaced and additional time is added to the clock\r\n    function survivalMode(clickedCircle) {\r\n        if (props.numbers[clickedCircle - 1] === findMin(props.numbers)) {\r\n            return (\r\n                props.setScore(props.score + 1),\r\n                props.pool.push(props.numbers[clickedCircle - 1]),\r\n                props.setSurvivalTimer(props.survivalTimer + 0.25),\r\n                props.numbers[clickedCircle - 1] = props.pool.splice(Math.floor(Math.random() * props.pool.length), 1)[0],\r\n                props.setNumbers([...props.numbers])\r\n            )\r\n\r\n        }\r\n        else\r\n            // If clicked number is different than the lowest, player loses time\r\n            props.setSurvivalTimer(props.survivalTimer - 1);\r\n    }\r\n\r\n    let gameModes = {\r\n        normal: normalMode,\r\n        survival: survivalMode\r\n    };\r\n\r\n\r\n    return (<div className=\"circles\">\r\n        {utils.range(1, props.count).map(circleId => (\r\n            <svg key={circleId} overflow=\"visible\" id={`svgCircle${circleId}`}>\r\n                <circle id={`circle${circleId}`} cx={0} cy={0} r=\"40\"\r\n                    stroke=\"black\"\r\n                    fill=\"black\"\r\n                    onClick={(e) => {\r\n                        let circleNumber = e.target.id[6];\r\n                        switch (props.gameMode) {\r\n                            case \"normal\": return gameModes.normal(circleNumber);\r\n                            case \"survival\": return gameModes.survival(circleNumber);\r\n                        }\r\n                    }}\r\n                />\r\n            </svg>\r\n\r\n        ))}\r\n    </div>)\r\n};\r\n\r\nexport default CircleDisplay;","D:\\Programowanie\\Moje programy\\ReflexApp\\reflex-app\\src\\components\\game.js",["71","72","73","74","75","76","77"],"import React, { useState, useEffect } from \"react\";\r\nimport CircleDisplay from \"./circleDisplay\"\r\nimport NumbersDisplay from \"./numberDisplay\";\r\nimport MenuDisplay from \"./menuDisplay\";\r\nimport utils from \"../utils\"\r\n\r\n// Variables for time control\r\nlet time = {\r\n    start: \"\",\r\n    current: \"\",\r\n    end: \"\",\r\n    clockNormal: \"\",\r\n    clockSurvival: \"\"\r\n\r\n};\r\n// 0-99 number pool that in-game values are generated from\r\nlet pool = [];\r\nfor (let i = 0; i < 100; i++) {\r\n    pool.push(i);\r\n}\r\n\r\nconst Game = props => {\r\n    const [menuVisibility, setMenuVisibility] = useState(\"visible\");\r\n    const [numberVisibility, setNumberVisibility] = useState(\"hidden\");\r\n    const [visibilityNormalWin, setVisibilityNormalWin] = useState(\"hidden\");\r\n    const [visibilitySurvivalWin, setVisibilitySurvivalWin] = useState(\"hidden\");\r\n    const [visibilityBackButton, setVisibilityBackButton] = useState(\"hidden\");\r\n    const [visibilityHelp1, setVisibilityHelp1] = useState(\"hidden\");\r\n    const [visibilityHelp2, setVisibilityHelp2] = useState(\"hidden\");\r\n    const [numbers, setNumbers] = useState(\"DontCheat\");\r\n    const [normalTimer, setNormalTimer] = useState(\"error\");\r\n    const [survivalTimer, setSurvivalTimer] = useState(\"error\");\r\n    const [gameMode, setGameMode] = useState(\"normal\");\r\n    const [score, setScore] = useState(0);\r\n\r\n    // Placeholder for 9 random numbers\r\n    let randomNumbers = [];\r\n\r\n    // Numbers is array of current in-game displayed numbers\r\n    // After value is clicked is being replaced by \"\", reducedNumbers checks if this is the only value in array\r\n    let reducedNumbers = [...new Set(numbers)];\r\n    // Here program checks if conditions of wining normal mode are fulffiled\r\n    let normalCondition = reducedNumbers.length === 1\r\n        ? (clearInterval(time.clockNormal), setNumbers([]), setNumberVisibility(\"hidden\"), winNormalMode())\r\n        : null;\r\n    // Here program checks if conditions of finishing survival mode are fulffiled, that is if time is over\r\n    let survivalCondition = survivalTimer < 0\r\n        ? (endSurvivalMode())\r\n        : null;\r\n\r\n    // Function starting time count in normal mode\r\n    function startClock() {\r\n        time.clockNormal = setInterval(() => {\r\n            time.current = new Date().getTime();\r\n            let timePassed = Math.floor((time.current - time.start) / 1000);\r\n            setNormalTimer(timePassed);\r\n        }, 100);\r\n    }\r\n\r\n    // Time counter for survival mode, after initialization is being set to default value and starts countdown\r\n    useEffect(() => {\r\n        time.clockSurvival =\r\n            setInterval(() => (setSurvivalTimer(survivalTimer - 1)), 1000);\r\n        return () => clearInterval(time.clockSurvival);\r\n    }, [survivalTimer]);\r\n\r\n    // Messages displayed during game and condition according to which those are being shown regarding normal or survival mode\r\n    let scoreMessage = \"\";\r\n    let solveTime = normalTimer;\r\n    let timeMessage = \"Time passed:\";\r\n    if (gameMode === \"survival\") {\r\n        timeMessage = \"Time left:\"\r\n        solveTime = survivalTimer;\r\n        scoreMessage = \"score:\";\r\n    }\r\n\r\n\r\n    // Function initialized after game starts, displayed numbers are generated and shown\r\n    function gameStart(givenGameMode) {\r\n        if (givenGameMode === \"normal\") {\r\n            startClock();\r\n            // Score in normal mode becomes invisible\r\n            setScore(\"\");\r\n        }\r\n        else if (givenGameMode === \"survival\") {\r\n            // Reseting clock, counting down time left for survival mode\r\n            setSurvivalTimer(11);\r\n        }\r\n        utils.draw(randomNumbers, pool);\r\n        setNumbers([...randomNumbers]);\r\n        let el = document.getElementById(\"menuCircle\");\r\n        setMenuVisibility(\"hidden\");\r\n        utils.circleSizeChanger(\"0\", 0.7, el);\r\n        setTimeout(() => (utils.spread(\"circle\"), utils.spread(\"number\")), 500);\r\n        time.start = new Date().getTime() + 1200;\r\n        setTimeout(() => (setNumberVisibility(\"visible\")), 1300);\r\n\r\n    }\r\n\r\n    // What happens after winning normal mode\r\n    function winNormalMode() {\r\n        time.end = new Date().getTime();\r\n        let solveTime = (time.end - time.start) / 1000;\r\n        setNormalTimer((solveTime).toString());\r\n        utils.focus(\"circle\");\r\n        utils.focus(\"number\");\r\n        let el = document.getElementById(\"menuCircle\");\r\n        setTimeout(() => (utils.circleSizeChanger(140, 0.7, el)), 1000);\r\n        setTimeout(() => (setVisibilityNormalWin(\"visible\"), setVisibilityBackButton(\"visible\")), 1700);\r\n    }\r\n\r\n    // What happens when time in survival mode runs out\r\n    function endSurvivalMode() {\r\n        setNumbers([]);\r\n        clearInterval(time.clockSurvival);\r\n        setSurvivalTimer(0);\r\n        setNumberVisibility(\"hidden\");\r\n        utils.focus(\"circle\");\r\n        utils.focus(\"number\");\r\n        let el = document.getElementById(\"menuCircle\");\r\n        setTimeout(() => (utils.circleSizeChanger(140, 0.7, el)), 1000);\r\n        setTimeout(() => (setVisibilitySurvivalWin(\"visible\"), setVisibilityBackButton(\"visible\")), 1700);\r\n    }\r\n\r\n\r\n\r\n    return (<div className=\"game\">\r\n        <CircleDisplay\r\n            count={9}\r\n            numbers={numbers}\r\n            setNumbers={setNumbers}\r\n            pool={pool}\r\n            survivalTimer={survivalTimer}\r\n            setSurvivalTimer={setSurvivalTimer}\r\n            gameMode={gameMode}\r\n            score={score}\r\n            setScore={setScore}\r\n        />\r\n\r\n\r\n        <NumbersDisplay\r\n            count={9}\r\n            visibility={numberVisibility}\r\n            numbers={numbers}\r\n        />\r\n\r\n\r\n        <MenuDisplay\r\n            gameStart={gameStart}\r\n            gameMode={gameMode}\r\n            setGameMode={setGameMode}\r\n            resetFunction={props.reset}\r\n            visibility={menuVisibility}\r\n            clockVisibility={numberVisibility}\r\n            visibilityNormalWin={visibilityNormalWin}\r\n            visibilitySurvivalWin={visibilitySurvivalWin}\r\n            visibilityBackButton={visibilityBackButton}\r\n            timeMessage={timeMessage}\r\n            solveTime={solveTime}\r\n            visibilityHelp1={visibilityHelp1}\r\n            visibilityHelp2={visibilityHelp2}\r\n            showHelp1={() => (setVisibilityHelp1(\"visible\"), setVisibilityHelp2(\"hidden\"), setMenuVisibility(\"hidden\"), setVisibilityBackButton(\"visible\"))}\r\n            showHelp2={() => (setVisibilityHelp1(\"hidden\"), setVisibilityHelp2(\"visible\"))}\r\n            score={score}\r\n            scoreMessage={scoreMessage}\r\n        />\r\n        <p id=\"credits\">Author: Grzegorz Ostapczuk</p>\r\n    </div>)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default Game;","D:\\Programowanie\\Moje programy\\ReflexApp\\reflex-app\\src\\components\\App.js",[],{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":43,"column":9,"nodeType":"84","messageId":"85","endLine":43,"endColumn":24},{"ruleId":"82","severity":1,"message":"86","line":47,"column":9,"nodeType":"84","messageId":"85","endLine":47,"endColumn":26},{"ruleId":"87","severity":1,"message":"88","line":94,"column":49,"nodeType":"89","messageId":"90","endLine":94,"endColumn":50},{"ruleId":"87","severity":1,"message":"88","line":109,"column":60,"nodeType":"89","messageId":"90","endLine":109,"endColumn":61},{"ruleId":"87","severity":1,"message":"88","line":122,"column":62,"nodeType":"89","messageId":"90","endLine":122,"endColumn":63},{"ruleId":"87","severity":1,"message":"88","line":162,"column":60,"nodeType":"89","messageId":"90","endLine":162,"endColumn":61},{"ruleId":"87","severity":1,"message":"88","line":163,"column":59,"nodeType":"89","messageId":"90","endLine":163,"endColumn":60},{"ruleId":"91","severity":2,"message":"92","line":61,"column":44,"nodeType":"84","messageId":"93","endLine":61,"endColumn":49},{"ruleId":"94","severity":1,"message":"95","line":62,"column":25,"nodeType":"96","messageId":"97","endLine":65,"endColumn":26},{"ruleId":"78","replacedBy":"98"},{"ruleId":"80","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":7,"column":59,"nodeType":"102","messageId":"103","endLine":7,"endColumn":60},{"ruleId":"100","severity":1,"message":"101","line":8,"column":40,"nodeType":"102","messageId":"103","endLine":8,"endColumn":41},{"ruleId":"100","severity":1,"message":"101","line":46,"column":40,"nodeType":"102","messageId":"103","endLine":46,"endColumn":41},{"ruleId":"78","replacedBy":"104"},{"ruleId":"80","replacedBy":"105"},{"ruleId":"87","severity":1,"message":"88","line":17,"column":130,"nodeType":"89","messageId":"90","endLine":17,"endColumn":131},{"ruleId":"87","severity":1,"message":"88","line":21,"column":133,"nodeType":"89","messageId":"90","endLine":21,"endColumn":134},{"ruleId":"94","severity":1,"message":"95","line":62,"column":25,"nodeType":"96","messageId":"97","endLine":65,"endColumn":26},{"ruleId":"82","severity":1,"message":"83","line":43,"column":9,"nodeType":"84","messageId":"85","endLine":43,"endColumn":24},{"ruleId":"82","severity":1,"message":"86","line":47,"column":9,"nodeType":"84","messageId":"85","endLine":47,"endColumn":26},{"ruleId":"87","severity":1,"message":"88","line":94,"column":49,"nodeType":"89","messageId":"90","endLine":94,"endColumn":50},{"ruleId":"87","severity":1,"message":"88","line":109,"column":60,"nodeType":"89","messageId":"90","endLine":109,"endColumn":61},{"ruleId":"87","severity":1,"message":"88","line":122,"column":62,"nodeType":"89","messageId":"90","endLine":122,"endColumn":63},{"ruleId":"87","severity":1,"message":"88","line":162,"column":60,"nodeType":"89","messageId":"90","endLine":162,"endColumn":61},{"ruleId":"87","severity":1,"message":"88","line":163,"column":59,"nodeType":"89","messageId":"90","endLine":163,"endColumn":60},"no-native-reassign",["106"],"no-negated-in-lhs",["107"],"no-unused-vars","'normalCondition' is assigned a value but never used.","Identifier","unusedVar","'survivalCondition' is assigned a value but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","no-restricted-globals","Unexpected use of 'event'.","defaultMessage","default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["106"],["107"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat",["106"],["107"],"no-global-assign","no-unsafe-negation"]